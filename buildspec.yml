version: 0.2

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REPOSITORY_URI
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
      - echo Setting up task definition template...
      
      # Get execution role ARN
      - EXECUTION_ROLE_ARN=$(aws ecs describe-task-definition --task-definition python-app --query taskDefinition.executionRoleArn --output text || echo "FAILED")
      - echo Execution Role ARN $EXECUTION_ROLE_ARN
      
      - cp taskdef.json.template taskdef.json
      - sed -i "s|EXECUTION_ROLE_ARN|$EXECUTION_ROLE_ARN|g" taskdef.json
      - sed -i "s|IMAGE1_NAME|$ECR_REPOSITORY_URI:$IMAGE_TAG|g" taskdef.json
  
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker build -t $ECR_REPOSITORY_URI:latest .
      - docker tag $ECR_REPOSITORY_URI:latest $ECR_REPOSITORY_URI:$IMAGE_TAG
  
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker image...
      - docker push $ECR_REPOSITORY_URI:latest
      - docker push $ECR_REPOSITORY_URI:$IMAGE_TAG
      
      # Prepare output directory
      - mkdir -p output
      - echo "Generating image definitions..."
      - echo '[{"name":"python-app","imageUri":"'"$ECR_REPOSITORY_URI:$IMAGE_TAG"'"}]' > output/imagedefinitions.json
      
      # Copy all deployment files to output directory
      - cp appspec.yml output/
      - cp taskdef.json output/
      
      # Verify files
      - echo "Final artifacts in output directory:"
      - ls -la output/

artifacts:
  files:
    - 'output/taskdef.json'
    - 'output/appspec.yml'
    - 'output/imagedefinitions.json'
  base-directory: $CODEBUILD_SRC_DIR/output
  name: build_output  # Explicit artifact name
  discard-paths: no
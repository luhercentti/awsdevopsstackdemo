version: 0.2

env:
  variables:
    REPOSITORY_URI: "$ECR_REPOSITORY_URI"
    TASK_DEFINITION: "python-app"
    CONTAINER_NAME: "python-app"

phases:
  pre_build:
    commands:
      - echo "Logging in to Amazon ECR..."
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $REPOSITORY_URI || exit 1
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
      - echo "IMAGE_TAG=$IMAGE_TAG" >> env_vars
      - echo "Preparing task definition..."
      - TASK_ROLE_ARN=$(aws ecs describe-task-definition --task-definition $TASK_DEFINITION --query taskDefinition.executionRoleArn --output text)
      - echo "TASK_ROLE_ARN=$TASK_ROLE_ARN" >> env_vars
      - jq '.containerDefinitions[0].image = "'$REPOSITORY_URI:$IMAGE_TAG'" | .executionRoleArn = "'$TASK_ROLE_ARN'"' taskdef.json.template > taskdef.json
      - cat taskdef.json

  build:
    commands:
      - echo "Build started on $(date)"
      - echo "Building Docker image..."
      - docker build -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG

  post_build:
    commands:
      - echo "Build completed on $(date)"
      - echo "Pushing Docker images..."
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo "Creating image definitions file..."
      - printf '[{"name":"%s","imageUri":"%s"}]' $CONTAINER_NAME $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
      - cat imagedefinitions.json

artifacts:
  files:
    - imagedefinitions.json
    - appspec.yml
    - taskdef.json
  discard-paths: yes